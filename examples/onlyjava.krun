import os
from krun.vm_defs import (JavaVMDef, JavaJarVMDef)
from krun import EntryPoint
from krun.util import fatal
from distutils.spawn import find_executable

# For a real experiment you would certainly use absolute paths
JAVA_BIN = find_executable("java")
if JAVA_BIN is None:
    fatal("Java binary not found in path")

# Who to mail
MAIL_TO = ["manuel.leduc@inria.fr"]

# Maximum number of error emails to send per-run
MAX_MAILS = 2

DIR = os.getcwd()
JKRUNTIME_DIR = os.path.join(DIR, "krun", "libkruntime", "")

HEAP_LIMIT = 2097152  # KiB
STACK_LIMIT = 8192  # KiB


PRE_EXECUTION_CMDS = [
    "sudo systemctl stop cron",
    "sudo systemctl stop ssh",
    "sudo systemctl stop exim4",
	"ip link set eno1 down"
]

POST_EXECUTION_CMDS = [
    "sudo systemctl start cron || true",
    "sudo systemctl start ssh || true",
    "sudo systemctl start exim4 || true",
	"ip link set eno1 up"
]


# Variant name -> EntryPoint
VARIANTS = {
    #"default-c": EntryPoint("bench.so", subdir="c"),
    #"default-python": EntryPoint("bench.py", subdir="python"),
    #"default-lua": EntryPoint("bench.lua", subdir="lua"),
    "default-java": EntryPoint("KrunEntry", subdir="java"),
}

ITERATIONS_ALL_VMS = 2  # Small number for testing.

VMS = {
    'Java': {
        'vm_def': JavaJarVMDef(JAVA_BIN, '/home/mleduc/krun/examples/benchmarks/boa_interpreter_fib/benchmarks.jar'),
        'variants': ['default-java'],
        'n_iterations': ITERATIONS_ALL_VMS,
    }
}


BENCHMARKS = {
    'boa_interpreter_fib': 2,
}

# list of "bench:vm:variant"
SKIP = [
    #"*:C:*",
    #"*:PyPy:*",
    #"*:LuaJIT:*",
]

N_EXECUTIONS = 2  # Number of fresh processes.

# No. of seconds to wait before taking the initial temperature reading.
# You should set this high enough for the system to cool down a bit.
# The default (if omitted) is 60 seconds.
TEMP_READ_PAUSE = 1

# Commands to run before and after each process execution
#
# Environment available for these commands:
#   KRUN_RESULTS_FILE: path to results file.
#   KRUN_LOG_FILE: path to log file.
#   KRUN_ETA_DATUM: time the ETA was computed
#   KRUN_ETA_VALUE: estimated time of completion
#PRE_EXECUTION_CMDS = ["sudo service cron stop"]
#POST_EXECUTION_CMDS = ["sudo service cron start"]

# CPU pinning (off by default)
#ENABLE_PINNING = False

# Lower and upper bound for acceptable APERF/MPERF ratios
AMPERF_RATIO_BOUNDS = 0.995, 1.005

# Rough rate of change in APERF per second above which a core is considered busy.
# For many machines this is simply the base clock frequency, but generally
# speaking, is undefined, so you need to check on a per-machine basis.
AMPERF_BUSY_THRESHOLD = 3.4 * 1000 * 1000 * 1000 / 1000  # 3.4 GHz / 1000
